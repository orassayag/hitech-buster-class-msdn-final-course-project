#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="VideoLibProject_AfterFix")]
	public partial class VideoLibDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertWaitingList(WaitingList instance);
    partial void UpdateWaitingList(WaitingList instance);
    partial void DeleteWaitingList(WaitingList instance);
    partial void InsertActorMovie(ActorMovie instance);
    partial void UpdateActorMovie(ActorMovie instance);
    partial void DeleteActorMovie(ActorMovie instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertMovieType(MovieType instance);
    partial void UpdateMovieType(MovieType instance);
    partial void DeleteMovieType(MovieType instance);
    partial void InsertRent(Rent instance);
    partial void UpdateRent(Rent instance);
    partial void DeleteRent(Rent instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    #endregion
		
		public VideoLibDBDataContext() : 
				base(global::Dal.Properties.Settings.Default.VideoLibProject_AfterFixConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VideoLibDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoLibDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoLibDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoLibDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<WaitingList> WaitingLists
		{
			get
			{
				return this.GetTable<WaitingList>();
			}
		}
		
		public System.Data.Linq.Table<ActorMovie> ActorMovies
		{
			get
			{
				return this.GetTable<ActorMovie>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<MovieType> MovieTypes
		{
			get
			{
				return this.GetTable<MovieType>();
			}
		}
		
		public System.Data.Linq.Table<Rent> Rents
		{
			get
			{
				return this.GetTable<Rent>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
	}
	
	[Table(Name="dbo.Actor")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorID;
		
		private string _ActorName;
		
		private System.DateTime _BirthDate;
		
		private EntitySet<ActorMovie> _ActorMovies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    partial void OnActorNameChanging(string value);
    partial void OnActorNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    #endregion
		
		public Actor()
		{
			this._ActorMovies = new EntitySet<ActorMovie>(new Action<ActorMovie>(this.attach_ActorMovies), new Action<ActorMovie>(this.detach_ActorMovies));
			OnCreated();
		}
		
		[Column(Storage="_ActorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ActorName
		{
			get
			{
				return this._ActorName;
			}
			set
			{
				if ((this._ActorName != value))
				{
					this.OnActorNameChanging(value);
					this.SendPropertyChanging();
					this._ActorName = value;
					this.SendPropertyChanged("ActorName");
					this.OnActorNameChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorMovie", Storage="_ActorMovies", ThisKey="ActorID", OtherKey="ActorID")]
		public EntitySet<ActorMovie> ActorMovies
		{
			get
			{
				return this._ActorMovies;
			}
			set
			{
				this._ActorMovies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActorMovies(ActorMovie entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_ActorMovies(ActorMovie entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
	}
	
	[Table(Name="dbo.WaitingList")]
	public partial class WaitingList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _MovieID;
		
		private System.DateTime _WaitDate;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnMovieIDChanging(string value);
    partial void OnMovieIDChanged();
    partial void OnWaitDateChanging(System.DateTime value);
    partial void OnWaitDateChanged();
    #endregion
		
		public WaitingList()
		{
			this._Member = default(EntityRef<Member>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_MovieID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[Column(Storage="_WaitDate", DbType="Date NOT NULL")]
		public System.DateTime WaitDate
		{
			get
			{
				return this._WaitDate;
			}
			set
			{
				if ((this._WaitDate != value))
				{
					this.OnWaitDateChanging(value);
					this.SendPropertyChanging();
					this._WaitDate = value;
					this.SendPropertyChanged("WaitDate");
					this.OnWaitDateChanged();
				}
			}
		}
		
		[Association(Name="Member_WaitingList", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.WaitingLists.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.WaitingLists.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[Association(Name="Movie_WaitingList", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.WaitingLists.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.WaitingLists.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(string);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActorMovie")]
	public partial class ActorMovie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorID;
		
		private string _MovieID;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    partial void OnMovieIDChanging(string value);
    partial void OnMovieIDChanged();
    #endregion
		
		public ActorMovie()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[Column(Storage="_ActorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[Column(Storage="_MovieID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorMovie", Storage="_Actor", ThisKey="ActorID", OtherKey="ActorID", IsForeignKey=true)]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.ActorMovies.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.ActorMovies.Add(this);
						this._ActorID = value.ActorID;
					}
					else
					{
						this._ActorID = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[Association(Name="Movie_ActorMovie", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.ActorMovies.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.ActorMovies.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(string);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CountryID;
		
		private string _CountryName;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(short value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Storage="_CountryID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Association(Name="Country_Movie", Storage="_Movies", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private byte _MemberLevel;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _Street;
		
		private string _City;
		
		private System.Nullable<short> _HouseNumber;
		
		private System.Nullable<int> _HomePhone;
		
		private int _MobilePhone;
		
		private string _Email;
		
		private string _Password;
		
		private short _DaysBalance;
		
		private System.DateTime _MemberSince;
		
		private EntitySet<WaitingList> _WaitingLists;
		
		private EntitySet<Rent> _Rents;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnMemberLevelChanging(byte value);
    partial void OnMemberLevelChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnHouseNumberChanging(System.Nullable<short> value);
    partial void OnHouseNumberChanged();
    partial void OnHomePhoneChanging(System.Nullable<int> value);
    partial void OnHomePhoneChanged();
    partial void OnMobilePhoneChanging(int value);
    partial void OnMobilePhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDaysBalanceChanging(short value);
    partial void OnDaysBalanceChanged();
    partial void OnMemberSinceChanging(System.DateTime value);
    partial void OnMemberSinceChanged();
    #endregion
		
		public Member()
		{
			this._WaitingLists = new EntitySet<WaitingList>(new Action<WaitingList>(this.attach_WaitingLists), new Action<WaitingList>(this.detach_WaitingLists));
			this._Rents = new EntitySet<Rent>(new Action<Rent>(this.attach_Rents), new Action<Rent>(this.detach_Rents));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_MemberLevel", DbType="TinyInt NOT NULL")]
		public byte MemberLevel
		{
			get
			{
				return this._MemberLevel;
			}
			set
			{
				if ((this._MemberLevel != value))
				{
					this.OnMemberLevelChanging(value);
					this.SendPropertyChanging();
					this._MemberLevel = value;
					this.SendPropertyChanged("MemberLevel");
					this.OnMemberLevelChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_Street", DbType="NVarChar(50)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NChar(30)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_HouseNumber", DbType="SmallInt")]
		public System.Nullable<short> HouseNumber
		{
			get
			{
				return this._HouseNumber;
			}
			set
			{
				if ((this._HouseNumber != value))
				{
					this.OnHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._HouseNumber = value;
					this.SendPropertyChanged("HouseNumber");
					this.OnHouseNumberChanged();
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="Int")]
		public System.Nullable<int> HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="Int NOT NULL")]
		public int MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_DaysBalance", DbType="SmallInt NOT NULL")]
		public short DaysBalance
		{
			get
			{
				return this._DaysBalance;
			}
			set
			{
				if ((this._DaysBalance != value))
				{
					this.OnDaysBalanceChanging(value);
					this.SendPropertyChanging();
					this._DaysBalance = value;
					this.SendPropertyChanged("DaysBalance");
					this.OnDaysBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_MemberSince", DbType="Date NOT NULL")]
		public System.DateTime MemberSince
		{
			get
			{
				return this._MemberSince;
			}
			set
			{
				if ((this._MemberSince != value))
				{
					this.OnMemberSinceChanging(value);
					this.SendPropertyChanging();
					this._MemberSince = value;
					this.SendPropertyChanged("MemberSince");
					this.OnMemberSinceChanged();
				}
			}
		}
		
		[Association(Name="Member_WaitingList", Storage="_WaitingLists", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<WaitingList> WaitingLists
		{
			get
			{
				return this._WaitingLists;
			}
			set
			{
				this._WaitingLists.Assign(value);
			}
		}
		
		[Association(Name="Member_Rent", Storage="_Rents", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Rent> Rents
		{
			get
			{
				return this._Rents;
			}
			set
			{
				this._Rents.Assign(value);
			}
		}
		
		[Association(Name="Member_Review", Storage="_Reviews", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WaitingLists(WaitingList entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_WaitingLists(WaitingList entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Rents(Rent entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Rents(Rent entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[Table(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MovieID;
		
		private string _MovieName;
		
		private short _MovieTypeID;
		
		private short _Copies;
		
		private string _Summary;
		
		private short _Year;
		
		private short _Length;
		
		private short _CountryID;
		
		private string _MoviePicUrl;
		
		private string _TrailerUrl;
		
		private byte _Active;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<WaitingList> _WaitingLists;
		
		private EntitySet<ActorMovie> _ActorMovies;
		
		private EntitySet<Rent> _Rents;
		
		private EntitySet<Review> _Reviews;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<MovieType> _MovieType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(string value);
    partial void OnMovieIDChanged();
    partial void OnMovieNameChanging(string value);
    partial void OnMovieNameChanged();
    partial void OnMovieTypeIDChanging(short value);
    partial void OnMovieTypeIDChanged();
    partial void OnCopiesChanging(short value);
    partial void OnCopiesChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnYearChanging(short value);
    partial void OnYearChanged();
    partial void OnLengthChanging(short value);
    partial void OnLengthChanged();
    partial void OnCountryIDChanging(short value);
    partial void OnCountryIDChanged();
    partial void OnMoviePicUrlChanging(string value);
    partial void OnMoviePicUrlChanged();
    partial void OnTrailerUrlChanging(string value);
    partial void OnTrailerUrlChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    #endregion
		
		public Movie()
		{
			this._WaitingLists = new EntitySet<WaitingList>(new Action<WaitingList>(this.attach_WaitingLists), new Action<WaitingList>(this.detach_WaitingLists));
			this._ActorMovies = new EntitySet<ActorMovie>(new Action<ActorMovie>(this.attach_ActorMovies), new Action<ActorMovie>(this.detach_ActorMovies));
			this._Rents = new EntitySet<Rent>(new Action<Rent>(this.attach_Rents), new Action<Rent>(this.detach_Rents));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			this._Country = default(EntityRef<Country>);
			this._MovieType = default(EntityRef<MovieType>);
			OnCreated();
		}
		
		[Column(Storage="_MovieID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[Column(Storage="_MovieName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MovieName
		{
			get
			{
				return this._MovieName;
			}
			set
			{
				if ((this._MovieName != value))
				{
					this.OnMovieNameChanging(value);
					this.SendPropertyChanging();
					this._MovieName = value;
					this.SendPropertyChanged("MovieName");
					this.OnMovieNameChanged();
				}
			}
		}
		
		[Column(Storage="_MovieTypeID", DbType="SmallInt NOT NULL")]
		public short MovieTypeID
		{
			get
			{
				return this._MovieTypeID;
			}
			set
			{
				if ((this._MovieTypeID != value))
				{
					if (this._MovieType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MovieTypeID = value;
					this.SendPropertyChanged("MovieTypeID");
					this.OnMovieTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Copies", DbType="SmallInt NOT NULL")]
		public short Copies
		{
			get
			{
				return this._Copies;
			}
			set
			{
				if ((this._Copies != value))
				{
					this.OnCopiesChanging(value);
					this.SendPropertyChanging();
					this._Copies = value;
					this.SendPropertyChanged("Copies");
					this.OnCopiesChanged();
				}
			}
		}
		
		[Column(Storage="_Summary", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="SmallInt NOT NULL")]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="SmallInt NOT NULL")]
		public short Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="SmallInt NOT NULL")]
		public short CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_MoviePicUrl", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MoviePicUrl
		{
			get
			{
				return this._MoviePicUrl;
			}
			set
			{
				if ((this._MoviePicUrl != value))
				{
					this.OnMoviePicUrlChanging(value);
					this.SendPropertyChanging();
					this._MoviePicUrl = value;
					this.SendPropertyChanged("MoviePicUrl");
					this.OnMoviePicUrlChanged();
				}
			}
		}
		
		[Column(Storage="_TrailerUrl", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TrailerUrl
		{
			get
			{
				return this._TrailerUrl;
			}
			set
			{
				if ((this._TrailerUrl != value))
				{
					this.OnTrailerUrlChanging(value);
					this.SendPropertyChanging();
					this._TrailerUrl = value;
					this.SendPropertyChanged("TrailerUrl");
					this.OnTrailerUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_DateAdded", DbType="Date NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[Association(Name="Movie_WaitingList", Storage="_WaitingLists", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<WaitingList> WaitingLists
		{
			get
			{
				return this._WaitingLists;
			}
			set
			{
				this._WaitingLists.Assign(value);
			}
		}
		
		[Association(Name="Movie_ActorMovie", Storage="_ActorMovies", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<ActorMovie> ActorMovies
		{
			get
			{
				return this._ActorMovies;
			}
			set
			{
				this._ActorMovies.Assign(value);
			}
		}
		
		[Association(Name="Movie_Rent", Storage="_Rents", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Rent> Rents
		{
			get
			{
				return this._Rents;
			}
			set
			{
				this._Rents.Assign(value);
			}
		}
		
		[Association(Name="Movie_Review", Storage="_Reviews", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		[Association(Name="Country_Movie", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(short);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="MovieType_Movie", Storage="_MovieType", ThisKey="MovieTypeID", OtherKey="MovieTypeID", IsForeignKey=true)]
		public MovieType MovieType
		{
			get
			{
				return this._MovieType.Entity;
			}
			set
			{
				MovieType previousValue = this._MovieType.Entity;
				if (((previousValue != value) 
							|| (this._MovieType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieType.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._MovieType.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._MovieTypeID = value.MovieTypeID;
					}
					else
					{
						this._MovieTypeID = default(short);
					}
					this.SendPropertyChanged("MovieType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WaitingLists(WaitingList entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_WaitingLists(WaitingList entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_ActorMovies(ActorMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_ActorMovies(ActorMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Rents(Rent entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Rents(Rent entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[Table(Name="dbo.MovieType")]
	public partial class MovieType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _MovieTypeID;
		
		private string _MovieTypeName;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieTypeIDChanging(short value);
    partial void OnMovieTypeIDChanged();
    partial void OnMovieTypeNameChanging(string value);
    partial void OnMovieTypeNameChanged();
    #endregion
		
		public MovieType()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[Column(Storage="_MovieTypeID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short MovieTypeID
		{
			get
			{
				return this._MovieTypeID;
			}
			set
			{
				if ((this._MovieTypeID != value))
				{
					this.OnMovieTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MovieTypeID = value;
					this.SendPropertyChanged("MovieTypeID");
					this.OnMovieTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_MovieTypeName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string MovieTypeName
		{
			get
			{
				return this._MovieTypeName;
			}
			set
			{
				if ((this._MovieTypeName != value))
				{
					this.OnMovieTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MovieTypeName = value;
					this.SendPropertyChanged("MovieTypeName");
					this.OnMovieTypeNameChanged();
				}
			}
		}
		
		[Association(Name="MovieType_Movie", Storage="_Movies", ThisKey="MovieTypeID", OtherKey="MovieTypeID")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.MovieType = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.MovieType = null;
		}
	}
	
	[Table(Name="dbo.Rent")]
	public partial class Rent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _MovieID;
		
		private System.DateTime _RentStart;
		
		private System.Nullable<System.DateTime> _RentEnd;
		
		private System.Nullable<int> _RentDays;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnMovieIDChanging(string value);
    partial void OnMovieIDChanged();
    partial void OnRentStartChanging(System.DateTime value);
    partial void OnRentStartChanged();
    partial void OnRentEndChanging(System.Nullable<System.DateTime> value);
    partial void OnRentEndChanged();
    partial void OnRentDaysChanging(System.Nullable<int> value);
    partial void OnRentDaysChanged();
    #endregion
		
		public Rent()
		{
			this._Member = default(EntityRef<Member>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_MovieID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[Column(Storage="_RentStart", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime RentStart
		{
			get
			{
				return this._RentStart;
			}
			set
			{
				if ((this._RentStart != value))
				{
					this.OnRentStartChanging(value);
					this.SendPropertyChanging();
					this._RentStart = value;
					this.SendPropertyChanged("RentStart");
					this.OnRentStartChanged();
				}
			}
		}
		
		[Column(Storage="_RentEnd", DbType="Date")]
		public System.Nullable<System.DateTime> RentEnd
		{
			get
			{
				return this._RentEnd;
			}
			set
			{
				if ((this._RentEnd != value))
				{
					this.OnRentEndChanging(value);
					this.SendPropertyChanging();
					this._RentEnd = value;
					this.SendPropertyChanged("RentEnd");
					this.OnRentEndChanged();
				}
			}
		}
		
		[Column(Storage="_RentDays", DbType="Int")]
		public System.Nullable<int> RentDays
		{
			get
			{
				return this._RentDays;
			}
			set
			{
				if ((this._RentDays != value))
				{
					this.OnRentDaysChanging(value);
					this.SendPropertyChanging();
					this._RentDays = value;
					this.SendPropertyChanged("RentDays");
					this.OnRentDaysChanged();
				}
			}
		}
		
		[Association(Name="Member_Rent", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Rents.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Rents.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[Association(Name="Movie_Rent", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Rents.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Rents.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(string);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _MovieID;
		
		private string _ReviewText;
		
		private byte _Rate;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnMovieIDChanging(string value);
    partial void OnMovieIDChanged();
    partial void OnReviewTextChanging(string value);
    partial void OnReviewTextChanged();
    partial void OnRateChanging(byte value);
    partial void OnRateChanged();
    #endregion
		
		public Review()
		{
			this._Member = default(EntityRef<Member>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_MovieID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReviewText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReviewText
		{
			get
			{
				return this._ReviewText;
			}
			set
			{
				if ((this._ReviewText != value))
				{
					this.OnReviewTextChanging(value);
					this.SendPropertyChanging();
					this._ReviewText = value;
					this.SendPropertyChanged("ReviewText");
					this.OnReviewTextChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="TinyInt NOT NULL")]
		public byte Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[Association(Name="Member_Review", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[Association(Name="Movie_Review", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(string);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
